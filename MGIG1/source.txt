#include<head.h>

pair<double, pair<int, int>> Mach_BellFurnace::m_RuleForFurnWithWidth = make_pair(850, make_pair(2, 3));

ptime getCurTime() {
	ptime curTime = from_iso_string("20200610T000000");
	return curTime;
};

set<string> rollingmachFrequ{ "BD-S003","BD-S005","BD-S025","BD-S009","BD-S010","BD-S011" };  // 轧机组; getStatus()用
// BD-S003	二辊可逆式热轧机; BD-S005	粗轧机; BD-S025	四辊中轧机; 
// BD-S009	森德威20辊精轧机; BD-S010	20辊精轧机; BD-S011	4辊精轧机

set<string> cut_StretchmachFrequ{ "BD-S018","BD-S015",
					"BD-S016","BD-S019","BD-S020","BD-S021" };  // 横纵剪和拉弯矫; getStatus()用
// BD-S018	1250横剪机组; BD-S015	650拉弯矫; 
// BD-S016	1250纵剪; BD-S019	650薄纵剪; BD-S020	650厚纵剪; BD-S021	350纵剪

set<string> washmachFrequ{ "BD-S012","BD-S013","BD-S014" };
// BD-S012	1250清洗机列; BD-S013	650清洗机列; BD-S014	新650清洗机列; getStatus()用

set<string> airFurnaceSet{ "BD-S024","BD-S007","BD-S008" };
//BD-S024  WSP气垫炉;    BD-S007  1250气垫式退火炉组;    BD-S008  650气垫式退火炉组

map<string, string> alloyMap{    // 由合金牌号（grade）查对应的合金种类（type）
	make_pair("C1010", "copper"),
	make_pair("C1020", "copper"),
	make_pair("C1100", "copper"),
	make_pair("C1220", "copper"),
	make_pair("C2600", "brass"),
	make_pair("C2680", "brass"),
	make_pair("C2720", "brass"),
	make_pair("C2740", "brass"),
	make_pair("C7025", "alloy"),
	make_pair("C7701", "alloy"),
	make_pair("H62", "brass"),
	make_pair("H65", "brass"),
	make_pair("H70", "brass"),
	make_pair("T2", "copper"),
	make_pair("TU1", "copper"),
	make_pair("TU2", "copper"), };

map<string, string> mapMachCodeToName{
	make_pair("BD-S002", "步进式加热炉"),
	make_pair("BD-S003", "二辊可逆式热轧机"),
	make_pair("BD-S004", "双面铣削机组"),

	make_pair("BD-S005", "粗轧机"),
	make_pair("BD-S025", "四辊中轧机"),

	make_pair("BD-S024", "WSP气垫炉"),
	make_pair("BD-S007", "1250气垫式退火炉组"),
	make_pair("BD-S008", "650气垫式退火炉组"),
	make_pair("BD-S006", "钟罩式退火炉"),

	make_pair("BD-S012", "1250清洗机列"),
	make_pair("BD-S013", "650清洗机列"),
	make_pair("BD-S014", "新650清洗机列"),

	make_pair("BD-S009", "sundwig20辊精轧机"),
	make_pair("BD-S010", "20辊精轧机"),
	make_pair("BD-S011", "4辊精轧机"),

	make_pair("BD-S015", "650拉弯矫"),

	make_pair("BD-S016", "1250纵剪"),
	make_pair("BD-S018", "1250横剪机组"),
	make_pair("BD-S019", "650薄纵剪"),
	make_pair("BD-S020", "650厚纵剪"),
	make_pair("BD-S021", "350纵剪"),

	make_pair("BD-S022", "全自动包装线"),
	make_pair("BD-S023", "简易包装线"),

	make_pair("BD-S026", "新研磨研削机"),
};

string getTypeFromGrade(string alloyGrade)
{
	return alloyMap[alloyGrade];
}

/*
BD-S012	1250清洗机列
BD-S013	650清洗机列
BD - S014	新650清洗机列

BD - S018	1250横剪机组
BD - S015	650拉弯矫

BD - S016	1250纵剪
BD - S019	650薄纵剪
BD - S020	650厚纵剪
BD - S021	350纵剪
*/


// 连接mysql数据库
bool ConnectDatabase(MYSQL* mysql)
{
	//初始化mysql  
	mysql_init(mysql);
	char* host("127.0.0.1"); //–MYSQL服务器的地址；
	char* user("root"); //–登录用户名；
	char* passwd("root"); //–登录密码；
	char* db("tongling"); //–要连接的数据库；
	unsigned int port(3306); //–MYSQL服务器的TCP服务端口； ? ?

	//返回false则连接失败，返回true则连接成功
	if (!(mysql_real_connect(mysql, host, user, passwd, db, port, NULL, 0))) //中间分别是主机，用户名，密码，数据库名，端口号（可以写默认0或者3306等），可以先写成参数再传进去  
	{
		printf("Error connecting to database:%s\n", mysql_error(mysql));
		return false;
	}
	else
	{
		printf("Connected...\n");
		return true;
	}
	return true;
}

// 查询数据库并返回查询结果
MYSQL_RES* QueryDatabase1(MYSQL* mysql, char* sql)
{
	MYSQL_RES* res;
	//设置编码格式（SET NAMES GBK也行），否则cmd下中文乱码
	mysql_query(mysql, "set names gbk");
	// 查询mysql数据库
	if (mysql_real_query(mysql, sql, (unsigned long)strlen(sql)))
	{
		std::cout << "mysql_real_query failure! " << std::endl;
		return 0;
	}
	// 存储结果集
	res = mysql_store_result(mysql);
	if (NULL == res) //  if( !(res = mysql_store_result(&mysql))
	{
		std::cout << "mysql_store_result failure! " << std::endl;
		return 0;
	}

	//打印数据行数  
	//std::cout << "number of dataline returned: " << mysql_affected_rows(mysql) << std::endl;
	std::cout << "number of dataline returned: " << mysql_num_rows(res) << std::endl;
	return res;
}

// 查询数据库并返回查询结果
bool InsertDatabase1(MYSQL* mysql, char* sql)
{
	//设置编码格式（SET NAMES GBK也行），否则cmd下中文乱码
	mysql_query(mysql, "set names gbk");

	//mysql_query(mysql, "START TRANSACTION");
	// 查询mysql数据库
	cout << "iinsertting" << endl;
	if (mysql_query(mysql, sql))
	{
		std::cout << "mysql_query failure! " << std::endl;
		return 0;
	}
	//mysql_query(mysql, "COMMIT");
	return true;
}

// 判断_number是否在_aRange(格式为"[0.1,3.4]")的范围内
bool isInRange(string _aRange, double _number)
{
	if (("null" == _aRange) || ("NULL" == _aRange)
		|| ("Null" == _aRange) || ("" == _aRange)
		|| (_number <= 0.0))
		return true;
	size_t site = _aRange.find(",", 0);
	size_t len = _aRange.length();

	if ((0 < site) && (site < len)
		&& (3 < len) && (len < 30))  // 必须限制长度，不然不确定
	{
		char leftSign = _aRange[0];
		char rightSign = _aRange[len - 1];
		double lowBound = stod(_aRange.substr(1, site));
		double upperBound = stod(_aRange.substr(site + 1, len - 1));
		if (('(' == leftSign) && (')' == rightSign))
			return (lowBound < _number) && (_number < upperBound);
		if (('(' == leftSign) && (']' == rightSign))
			return (lowBound < _number) && (_number <= upperBound);
		if (('[' == leftSign) && (')' == rightSign))
			return (lowBound <= _number) && (_number < upperBound);
		if (('[' == leftSign) && (']' == rightSign))
			return (lowBound <= _number) && (_number <= upperBound);
		else
		{
			std::cout << "ERROR with '" << _aRange << "'！ 不能解析！ " << std::endl;
			return false;
		}
	}
	else
	{
		std::cout << "ERROR with '" << _aRange << "'！ 不能解析！ " << std::endl;
		return false;
	}
};

// 获取job在当前mach上的status，以便查找产能
string getStatus(string machCode, Job* jobP, unsigned machIndex)
{
	pair<string, unsigned>& machs = (jobP->m_proceMachs)[machIndex];
	if ("BD-S002" == machCode)  //是BD-S002  步进式加热炉，现在默认铸锭??？？
		return "ingotting";
	if ("BD-S007" == machCode) // 是BD-S007  1250气垫式退火炉组??？？
		return "semi_hard_state";

	if (rollingmachFrequ.count(machCode) > 0) //是轧机
	{
		if ("BD-S003" == machCode) // 是BD-S003	  二辊可逆式热轧机
			return "hot_rolling";
		if (("BD-S009" == machCode) || ("BD-S010" == machCode)) // 是BD-S009  森德威20辊精轧机
		{
			return "finished_product"; //判断后面还有没有轧机，没有则为轧机成品，有则为成品
			"intermediate_material";
		}
		// BD-S003	二辊可逆式热轧机, BD-S005	粗轧机; BD-S025	四辊中轧机; 
		// BD-S009	森德威20辊精轧机; BD-S010	20辊精轧机; BD-S011	4辊精轧机
		return "";
	}

	if (cut_StretchmachFrequ.count(machCode) > 0) //是剪切或拉矫
	{
		// 判断后面是不是只有包装或没有工序，是则为成品(finished_product)，不是则检查下工序是否是横剪(cross_fedding);
		// 包装线: BD-S022  全自动包装线, BD-S023  简易包装线
		// 若下工序不是横剪，则视为横剪供料(deburring)
		if ((machIndex + 1) == jobP->m_proceMachs.size())  // BD-S016	1250纵剪; BD-S020	650厚纵剪;
			return "finished_product";
		if (("BD-S022" == jobP->m_proceMachs[machIndex + 1].first)
			|| ("BD-S023" == jobP->m_proceMachs[machIndex + 1].first))
			return "cross_fedding";
		else
			return "deburring";
		// BD-S018	1250横剪机组; BD-S015	650拉弯矫; 
		// BD-S016	1250纵剪; BD-S019	650薄纵剪; BD-S020	650厚纵剪; BD-S021	350纵剪
		if ("BD-S019" == machCode) // 是BD-S019  650薄纵剪
			return "finished_product";
		if ("BD-S015" == machCode) // 是BD-S015  650拉弯矫
			return "";
		return ""; // BD-S021	350纵剪?,BD-S018	1250横剪机组?	
	}

	if (washmachFrequ.count(machCode) > 0) //是清洗
	{
		if ("BD-S012" == machCode) // 是BD-S012  1250清洗机列
			return "finished_product";
		if ("BD-S013" == machCode) // 是BD-S013	650清洗机列
			return "";
		if ("BD-S014" == machCode)
			return ""; // ?
	}

	return "";
}

// 获取加工时间； 根据mach和job得到job在该mach上的加工时间
time_duration getProcessTime(Mach* machP, Job* jobP, unsigned machIndex)
{
	//return time_duration(2, 0, 0, 0);

	ProcessTargets const& processTargets = jobP->m_proceTargets[machIndex].second;  //??？？
	double processT(0);
	// bool isRollingMach(rollingmachFrequ.count(machP->m_machCode) > 0);
	if (CodeOfBellFurn == machP->m_machCode)  // 如果是钟罩炉
		return double2timeDuration(T_Bell_Furn);

	for (auto& cap : machP->m_capsOriginalInfo)
	{
		if (!isInRange(cap.m_width, processTargets.m_targetWeight))
			continue;
		if (!isInRange(cap.m_thick, processTargets.m_targetThick))
			continue;
		if ((cap.m_alloyType != jobP->m_alloyType)
			&& ("general_alloy" != cap.m_alloyType)
			&& ("null" != cap.m_alloyType)
			&& ("Null" != cap.m_alloyType)
			&& ("NULL" != cap.m_alloyType)
			&& ("" != cap.m_alloyType))
			continue;
		string status = getStatus(machP->m_machCode, jobP, machIndex);

		//std::cout << "status=" << status << "cap.m_status=" << cap.m_status << std::endl;

		if ((cap.m_status != status)
			&& ("general_status" != cap.m_status)
			&& ("null" != cap.m_status)
			&& ("Null" != cap.m_status)
			&& ("NULL" != cap.m_status)
			&& ("" != cap.m_status))
			continue;
		processT = mystod(cap.m_processT.c_str());
	}
	if (0.0 == processT)
		std::cout << "Error with capacity! Cannot find a matched capacity of job '"
		<< jobP->m_jobCode << "' on machine " << machP->m_machCode << "!" << std::endl;

	processT = 0.0 == processT ? 0.5 : processT;

	//std::cout << "machCode=" << machP->m_machCode << "; jobCode="<<jobP->m_jobCode <<"; cap="<<processT<< std::endl;
	return double2timeDuration(processT);
};

// batch组批
void batch()
{


}

// 判断字符串是否是数字
bool isNum(string str)
{
	stringstream sin(str);
	double d;
	char c;
	if (!(sin >> d))  //sin >> t表示把sin转换成double的变量（其实对于int和float型的都会接收），如果转换成功，则值为非0，如果转换不成功就返回为0
		return false;
	if (sin >> c)
		return false;
	return true;
};

// string to double
double mystod(const char* str)
{
	if (str == NULL)
	{
		std::cout << "Error with str-'" << str << "'! Str is NULL！" << std::endl;
		return -1;  // 值为空
	}
	else if (isNum(str))
		return stod(str);
	else
	{
		std::cout << "Error with str-'" << str << "'! Str is NOT A NUMBER！" << std::endl;
		return -2;  // 不是数字
	}
}

// string to int
int mystoi(const char* str)
{
	if (str == NULL)
	{
		std::cout << "Error with str- " << str << "! Str is NULL！" << std::endl;
		return -1;  // 值为空
	}
	else if (isNum(str))
		return stoi(str);
	else
	{
		std::cout << "Error with str- " << str << "! Str is NOT A NUMBER！" << std::endl;
		return -2;  // 不是数字
	}
}

// 定义比较pair<Job*, ptime>
bool myCmpBy_ptime(pair<Job*, ptime> _a, pair<Job*, ptime> _b)
{
	return _a.second < _b.second;
};

// 定义比较pair<Job*, time_duration>
bool myCmpBy_time_duration(pair<Job*, time_duration> _a, pair<Job*, time_duration> _b)
{
	return _a.second < _b.second;
};

// 小时数（double）转化为time_duration类型
time_duration double2timeDuration(double _processT)
{
	int _n_Sec = int(_processT * 3600);//转整型

	int _hour = 0;
	int _minute = 0;
	int _second = 0;
	if (_n_Sec >= 3600)
	{
		_hour = _n_Sec / 3600;
		_n_Sec = _n_Sec % 3600;
	}
	if (_n_Sec >= 60)
	{
		_minute = _n_Sec / 60;
		_n_Sec = _n_Sec % 60;
	}
	_second = _n_Sec;
	return time_duration(_hour, _minute, _second, 0);
};

// time_duration类型转化为小时数（double）
double timeDuration2Double(time_duration _timeDura)
{
	return double(_timeDura.total_seconds()) / 3600;
};



// airFurnaceSet
bool getIsSwitch(Job& curJob, Mach& curMach, Job& otherJob)  // 是否需要切换
{
	if (airFurnaceSet.find(curMach.m_machCode) != airFurnaceSet.end())  // 是气垫炉组的机器
	{
		//cout << otherJob.m_jobCode <<" "<< curJob.m_jobCode
			//<<" otherJob.m_alloyType=" << otherJob.m_alloyType<<"curJob.m_alloyType"<< curJob.m_alloyType << endl;
		if (otherJob.m_alloyType == curJob.m_alloyType) return false;
		else return true;
	}
	return false;
};


//  调试用的初始化
void myInitialization(vector<string>& jobsCodeVec, vector<string>& machsCodeVec, map<string, Job*>& jobsMap, map<string, Mach*>& machsMap)
{
	jobsCodeVec = vector<string>();
	machsCodeVec = vector<string>();
	jobsMap = map<string, Job*>();
	machsMap = map<string, Mach*>();

	string machCode = "C101";
	machsCodeVec.push_back(machCode);
	Mach* machIter = new Mach;
	machsMap.insert(make_pair(machCode, machIter));
	machIter->m_machCode = machCode;

	machCode = "C102";
	machsCodeVec.push_back(machCode);
	machIter = new Mach;
	machsMap.insert(make_pair(machCode, machIter));
	machIter->m_machCode = machCode;

	machCode = "C103";
	machsCodeVec.push_back(machCode);
	machIter = new Mach;
	machsMap.insert(make_pair(machCode, machIter));
	machIter->m_machCode = machCode;


	string jobCode = "j1";
	jobsCodeVec.push_back(jobCode);
	Job* jobIter = new Job;
	jobsMap.insert(make_pair(jobCode, jobIter));
	jobIter->m_jobCode = jobCode;
	jobIter->m_startDateOfOrder = time_from_string("2020-5-1 00:00:00");
	jobIter->m_dueDateOfOrder = time_from_string("2020-5-1 20:00:00");
	jobIter->m_proceMachs = vector<pair<string, unsigned>>({ make_pair("C101",1), make_pair("C102",1) });
	jobIter->m_proceTargets = vector<pair<pair<string, unsigned>, ProcessTargets>>({ make_pair(make_pair("C101",1), ProcessTargets()),
		make_pair(make_pair("C101",1), ProcessTargets()) });

	jobCode = "j2";
	jobsCodeVec.push_back(jobCode);
	jobIter = new Job;
	jobsMap.insert(make_pair(jobCode, jobIter));
	jobIter->m_jobCode = jobCode;
	jobIter->m_startDateOfOrder = time_from_string("2020-5-1 00:00:00");
	jobIter->m_dueDateOfOrder = time_from_string("2020-5-1 18:00:00");
	jobIter->m_proceMachs = vector<pair<string, unsigned>>({ make_pair("C102",1), make_pair("C103",1) });
	jobIter->m_proceTargets = vector<pair<pair<string, unsigned>, ProcessTargets>>({ make_pair(make_pair("C102",1), ProcessTargets()),
		make_pair(make_pair("C103",1), ProcessTargets()) });

	jobCode = "j3";
	jobsCodeVec.push_back(jobCode);
	jobIter = new Job;
	jobsMap.insert(make_pair(jobCode, jobIter));
	jobIter->m_jobCode = jobCode;
	jobIter->m_startDateOfOrder = time_from_string("2020-5-1 00:00:00");
	jobIter->m_dueDateOfOrder = time_from_string("2020-5-1 21:00:00");
	jobIter->m_proceMachs = vector<pair<string, unsigned>>({ make_pair("C101",1), make_pair("C102",1), make_pair("C103",1) });
	jobIter->m_proceTargets = vector<pair<pair<string, unsigned>, ProcessTargets>>({ make_pair(make_pair("C101",1), ProcessTargets()),
		make_pair(make_pair("C102",1), ProcessTargets()),
		make_pair(make_pair("C103",1), ProcessTargets()) });

};

//  初始化产能
void initializeCaps(MYSQL_RES* res, vector<string>& machsCodeVec, map<string, Mach*>& machsMap)
{
	MYSQL_ROW row;  //一个行数据的类型安全(type-safe)的表示，表示一条数据
	MYSQL_FIELD* field = NULL;

	vector<string> fieldsNames_orders;
	//字段的个数
	int fieldcount = mysql_num_fields(res);
	std::cout << "Number of fields: " << fieldcount << std::endl;
	//显示所有字段名
	for (int i = 0; i < fieldcount; ++i)
	{
		field = mysql_fetch_field_direct(res, i);
		std::cout << field->name << "\t";
		fieldsNames_orders.push_back(field->name);
	}
	std::cout << std::endl;
	int i = 0;  // 行数
	while (row = mysql_fetch_row(res))
	{
		// unit_id, width, thick, alloy_name, status, process_time, capacity, explanation
		// 重复读取行，并输出获取每行中字段的值，直到row为NULL

		CapWithConditions cap;

		cap.m_width = (NULL == row[1]) ? "NULL" : row[1];
		cap.m_thick = (NULL == row[2]) ? "NULL" : row[2];
		cap.m_alloyType = (NULL == row[3]) ? "NULL" : row[3];;
		cap.m_status = (NULL == row[4]) ? "NULL" : row[4];;
		cap.m_processT = (NULL == row[5]) ? "NULL" : row[5];;
		cap.m_cap = (NULL == row[6]) ? "NULL" : row[6];;
		string machCode = (NULL == row[0]) ? "NULL" : row[0];;
		Mach* machP = machsMap[machCode];

		machP->m_capsOriginalInfo.push_back(cap);
		/*
		std::cout << "row[0] = " << row[0] << std::endl;
		std::cout << "row[1] = " << row[1] << std::endl;
		std::cout << "row[2] = " << row[2] << std::endl;
		std::cout << "row[3] = " << row[3] << std::endl;
		std::cout << "row[4] = " << row[4] << std::endl;
		std::cout << "row[5] = " << row[5] << std::endl;
		std::cout << "row[6] = " << row[6] << std::endl;
		*/
		++i;

	}
	std::cout << "There are " << i << " notes in total." << std::endl;
};


// 数据库读取工单信息并初始化
void initializeJobs(MYSQL_RES* res, vector<string>& jobsCodeVec, map<string, Job*>& jobsMap)
{
	MYSQL_ROW row;  //一个行数据的类型安全(type-safe)的表示，表示一条数据
	MYSQL_FIELD* field = NULL;

	vector<string> fieldsNames_orders;
	//字段的个数
	int fieldcount = mysql_num_fields(res);
	std::cout << "Number of fields: " << fieldcount << std::endl;
	//显示所有字段名
	for (int i = 0; i < fieldcount; i++)
	{
		field = mysql_fetch_field_direct(res, i);
		std::cout << field->name << "\t";
		fieldsNames_orders.push_back(field->name);
	}
	std::cout << std::endl;
	int i = 0;  // 行数
	while (row = mysql_fetch_row(res))
	{
		// strip_id, deadline, thick, width, note, length, weight, inner_diameter, alloy_grade
		// 重复读取行，并输出获取每行中字段的值，直到row为NULL
		Job* jobP = new Job;
		jobP->m_jobCode = row[0];
		jobP->m_dueDateOfOrderStr = row[1];
		jobP->m_alloyGrade = row[8];
		jobP->m_alloyType = getTypeFromGrade(jobP->m_alloyGrade);
		jobP->m_initialInfos.m_targetThick = mystod(row[2]);
		jobP->m_initialInfos.m_targetWidth = mystod(row[3]);
		jobP->m_initialInfos.m_targetLength = mystod(row[5]);
		jobP->m_initialInfos.m_targetWeight = mystod(row[6]);
		jobP->m_initialInfos.m_targetInnerDia = mystod(row[7]);
		jobsCodeVec.push_back(jobP->m_jobCode);
		jobsMap[jobP->m_jobCode] = jobP;
		++i;
	}
	std::cout << "There are " << i << " jobs in total." << std::endl;
};

// 初始化工单——完善工单信息（加工目标和加工机器）
void initializeJobs2(MYSQL_RES* res, vector<string>& jobsCodeVec, map<string, Job*>& jobsMap)
{
	MYSQL_ROW row;  //一个行数据的类型安全(type-safe)的表示，表示一条数据
	MYSQL_FIELD* field = NULL;

	vector<string> fieldsNames_orders;
	//字段的个数
	int fieldcount = mysql_num_fields(res);
	std::cout << "Number of fields: " << fieldcount << std::endl;
	//显示所有字段名
	for (int i = 0; i < fieldcount; ++i)
	{
		field = mysql_fetch_field_direct(res, i);
		std::cout << field->name << "\t";
		fieldsNames_orders.push_back(field->name);
	}
	std::cout << std::endl;
	int i = 0;  // 行数
	while (row = mysql_fetch_row(res))
	{
		// strip_id, process_num, unit_id, thick, width, note, unit_name_orig
		// 重复读取行，并输出获取每行中字段的值，直到row为NULL
		string jobCode = row[0];
		Job* jobP;
		if (jobsMap.find(jobCode) == jobsMap.end()) // 如果jobCode不在jobsMap中，
		{
			std::cout << "Warning: there are no info in table 'tlorderinformation' for the strip_id of '"
				<< jobCode << "', but '" << jobCode << "' exists in table 'tlprocess'!" << std::endl;
			jobP = new Job;
			jobP->m_jobCode = jobCode;
			//continue;
		}

		else
			jobP = jobsMap[jobCode];
		/*
		if(jobsMap.find(jobCode) == jobsMap.end())
		{
			jobP = new Job;
			jobsCodeVec.push_back(jobCode);
			jobsMap[jobCode] = jobP;
		}
		else
			jobP = jobsMap[jobCode];
		*/
		int orderOfMach = mystoi(row[1]);
		string machCode = row[2];
		unsigned num_reentry = 1;
		for (pair<string, unsigned>& machInfo : jobP->m_proceMachs)
			num_reentry = (machCode == machInfo.first) ? (num_reentry + 1) : num_reentry;
		//std::cout<< jobP->m_jobCode<<", "<< machCode << std::endl;
		jobP->m_proceMachs.push_back(make_pair(machCode, num_reentry));
		//ProcessTargets* processTags= new ProcessTargets(mystod(row[3]), mystod(row[4]));
		//cout<<"宽度a="<< mystod(row[4]) <<"   厚度b="<< mystod(row[3]) <<"\n"<<endl;
		jobP->m_proceTargets.push_back(make_pair(make_pair(machCode, num_reentry), ProcessTargets(mystod(row[4]), mystod(row[3]))));
		++i;
	}
	std::cout << "There are " << i << " notes in total." << std::endl;
};

// 数据库读取机器信息并初始化
void initialMachs(MYSQL_RES* res, vector<string>& machsCodeVec, map<string, Mach*>& machsMap)
{
	MYSQL_ROW row;  //一个行数据的类型安全(type-safe)的表示，表示一条数据
	MYSQL_FIELD* field = NULL;

	vector<string> fieldsNames_orders;
	//字段的个数
	int fieldcount = mysql_num_fields(res);
	std::cout << "Number of fields: " << fieldcount << std::endl;
	//显示所有字段名
	for (int i = 0; i < fieldcount; i++)
	{
		field = mysql_fetch_field_direct(res, i);
		std::cout << field->name << "\t";
		fieldsNames_orders.push_back(field->name);
	}
	std::cout << std::endl;
	int i = 0;  // 行数
	while (row = mysql_fetch_row(res))
	{
		// unit_id, name
		// 重复读取行，并输出获取每行中字段的值，直到row为NULL
		//std::cout << "machdCode" << row[0] << std::endl;
		if (CodeOfBellFurn == row[0])  // 是钟罩炉
		{
			Mach_BellFurnace* machP = new Mach_BellFurnace();
			machP->m_machCode = row[0];
			machsCodeVec.push_back(machP->m_machCode);
			machsMap[machP->m_machCode] = machP;
		}
		else if (airFurnaceSet.find(string(row[0])) != airFurnaceSet.end()) // 是气垫炉
		{
			Mach_AirFurnace* machP = new Mach_AirFurnace();
			machP->m_machCode = row[0];
			machsCodeVec.push_back(machP->m_machCode);
			machsMap[machP->m_machCode] = machP;
			std::cout << "machCode" << row[0] << std::endl;
			std::cout << "mach time" << machP->m_timeOfSwith << std::endl;

		}
		else
		{
			Mach* machP = new Mach;
			machP->m_machCode = row[0];
			machsCodeVec.push_back(machP->m_machCode);
			machsMap[machP->m_machCode] = machP;
		}
		++i;
	}
	std::cout << "There are " << i << " machines in total." << std::endl;
}

// 初始化机器信息
void initialMachs2(MYSQL_RES* res, vector<string>& machsCodeVec, map<string, Mach*>& machsMap)
{

	//Mach *mach_bellFurnace = machsMap["BD-S006"];  // 钟罩炉


	MYSQL_ROW row;  //一个行数据的类型安全(type-safe)的表示，表示一条数据
	MYSQL_FIELD* field = NULL;

	vector<string> fieldsNames_orders;
	//字段的个数
	int fieldcount = mysql_num_fields(res);
	std::cout << "Number of fields: " << fieldcount << std::endl;
	//显示所有字段名
	for (int i = 0; i < fieldcount; i++)
	{
		field = mysql_fetch_field_direct(res, i);
		std::cout << field->name << "\t";
		fieldsNames_orders.push_back(field->name);
	}
	std::cout << std::endl;
	int i = 0;  // 行数
	while (row = mysql_fetch_row(res))
	{
		// unit_id, name
		// 重复读取行，并输出获取每行中字段的值，直到row为NULL
		Mach* machP = new Mach;
		machP->m_machCode = row[0];
		machsCodeVec.push_back(machP->m_machCode);
		machsMap[machP->m_machCode] = machP;
		++i;
	}
	std::cout << "There are " << i << " machines in total." << std::endl;
}

// 获取目标函数值 <总延期时间(小时), 加工所有工件所需的时间长度(小时)>
pair<double, double> getObjVals(map<string, Job*>& jobsMap, map<string, Mach*>& machsMap)  // get object value
{
	double totalDueTime(0);  // 总延期时间（小时）
	ptime timeOfStart;       // 开始排程的时间点
	ptime timeOfCompletion;  // 所有工件加工完的时间点
	double makeSpan(0);      // 加工所有工件所需的时间长度（小时）
	int i_numOfJob(0);
	for (auto& jobInfo : jobsMap)  // 遍历所有job
	{
		Job* curJobP = jobInfo.second;
		if (0 == curJobP->m_allocatedTimeWin.size())
			continue;
		time_period lastTimeWin = (curJobP->m_allocatedTimeWin.end() - 1)->second;
		ptime dueDate = curJobP->m_dueDateOfOrder;
		double delayTime = timeDuration2Double(lastTimeWin.last() - dueDate);
		delayTime = delayTime >= 0 ? delayTime : 0;
		//cout<<"delayTime="<< delayTime <<endl;
		totalDueTime += delayTime;
		if (0 == i_numOfJob)
		{
			timeOfStart = curJobP->m_startDateOfOrder;
			timeOfCompletion = lastTimeWin.last();
			//cout << "timeOfCompletion_or=" << to_iso_extended_string(timeOfCompletion) << endl;
			//cout << "timeOfStart_or=" << to_iso_extended_string(timeOfStart) << endl;
		}
		else
		{
			if (timeOfCompletion < lastTimeWin.last())
				timeOfCompletion = lastTimeWin.last();
			if ((curJobP->m_startDateOfOrder) < timeOfStart)
				timeOfStart = curJobP->m_startDateOfOrder;
		}
		i_numOfJob++;
		//std::cout << "delay time of "<<curJobP->m_jobCode << " is: " << delayTime<<std::endl;
	}

	//cout<< "timeOfCompletion=" <<to_iso_extended_string(timeOfCompletion)<<endl;
	//cout<< "timeOfStart=" << to_iso_extended_string(timeOfStart) << endl;

	makeSpan = timeDuration2Double(timeOfCompletion - timeOfStart);
	//std::cout << "totalDueTime=　" << totalDueTime << std::endl;
	//std::cout << "makeSpan = " << makeSpan << std::endl;
	//std::cout << std::endl;
	return make_pair(totalDueTime, makeSpan);
};


// 打印最终排程结果
void printFinalRes(map<string, Job*>& jobsMap, map<string, Mach*>& machsMap)
{
	// 打印排程结果
	/*
	std::cout << std::endl;
	for (auto& machInfo : machsMap)  // 遍历所有machine
	{
		Mach& curMach = *(machInfo.second);
		std::cout << "MachCode---------" << curMach.m_machCode << std::endl;
		for (auto& timeInfo : curMach.m_allocatedTimeWin)  // 遍历所有time_period
		{
			string jobCode = timeInfo.first.first;
			time_period timeWin = timeInfo.second;
			std::cout << "JobCode  " << jobCode << ": " << to_iso_extended_string(timeWin.begin())
				<< "--" << to_iso_extended_string(timeWin.last()) << std::endl;
		}
		std::cout << std::endl;
	};
	*/

	std::cout << std::endl;
	for (auto& machInfo : machsMap)  // 遍历所有machine
	{
		if (CodeOfBellFurn == machInfo.first)
		{
			Mach_BellFurnace* curMach = static_cast<Mach_BellFurnace*>(machInfo.second);
			std::cout << "MachCode---------" << curMach->m_machCode << std::endl;
			unsigned i_timeline(0);
			for (auto& timeline : curMach->m_timeLines)
			{
				std::cout << "   Number of time line: " << i_timeline << std::endl;
				for (auto& timeWinInfo : timeline)  // 遍历所有time_period
				{
					// using TimeWin = pair<map<Job*, unsigned>, time_period>;  // pair< map<Job*, 该job第几次重入>, job插入的时间窗>

					time_period timeWin = timeWinInfo.second;
					std::cout << "      " << to_iso_extended_string(timeWin.begin())
						<< "--" << to_iso_extended_string(timeWin.last()) << std::endl;
					unsigned i_jobs(0);
					for (auto& jobs : timeWinInfo.first)  // 遍历所有job
					{
						std::cout << "                                      Number of jobs this period=" << i_jobs
							<< "  jobCode = " << (jobs.first)->m_jobCode << "; reentry = " << jobs.second << std::endl;;
						++i_jobs;
					}
				}
				++i_timeline;
			}
			std::cout << std::endl;
		}
	};

	std::cout << std::endl;
	for (auto& machInfo : machsMap)  // 遍历所有machine
	{
		if (airFurnaceSet.find(machInfo.first) != airFurnaceSet.end())
		{
			Mach_AirFurnace* curMach = static_cast<Mach_AirFurnace*>(machInfo.second);
			std::cout << "MachCode---------" << curMach->m_machCode << std::endl;
			for (pair<pair<string, unsigned>, time_period>& timeWinInfo : curMach->m_allocatedTimeWin)
			{// vector<pair<pair<string, unsigned>, time_period>> m_allocatedTimeWin;
				string jobCode = timeWinInfo.first.first;
				time_period timeWin = timeWinInfo.second;
				std::cout << "jobCode  " << jobCode << ": " << "reentry=" << timeWinInfo.first.second
					<< " " << to_iso_extended_string(timeWin.begin())
					<< "--" << to_iso_extended_string(timeWin.last())
					<< jobsMap[jobCode]->m_alloyType << std::endl;
			}
			std::cout << std::endl;
		}
	};

	std::cout << "\n\n" << std::endl;
	for (auto& jobInfo : jobsMap)  // 遍历所有job
	{
		Job* curJobP = jobInfo.second;
		std::cout << "JobCode---------" << curJobP->m_jobCode << std::endl;
		for (auto& timeInfo : curJobP->m_allocatedTimeWin)  // 遍历所有time_period
		{
			string machCode = timeInfo.first.first;
			time_period timeWin = timeInfo.second;
			std::cout << "MachCode  " << machCode << ": " << to_iso_extended_string(timeWin.begin())
				<< "--" << to_iso_extended_string(timeWin.last()) << std::endl;
		}
		std::cout << std::endl;
	};
}

// 打印最终排程结果
void writeToCSV(map<string, Job*>& jobsMap, map<string, Mach*>& machsMap)
{
	ofstream opt;
	opt.open("ResultsOfMach_spt.csv", ios::out | ios::trunc);
	cout << "Writing to csv..." << endl;
	for (auto& machInfo : machsMap)  // 遍历所有machine
	{
		if (CodeOfBellFurn == machInfo.first) {
			Mach_BellFurnace* curMachP = static_cast<Mach_BellFurnace*>(machInfo.second);
			opt << curMachP->m_machCode << endl;
			unsigned i_timeline(0);
			for (auto& timeline : curMachP->m_timeLines)
			{
				opt << "ParallelMachine=" << i_timeline << std::endl;
				for (auto& timeWinInfo : timeline)  // 遍历所有time_period
				{
					// using TimeWin = pair<map<Job*, unsigned>, time_period>;  // pair< map<Job*, 该job第几次重入>, job插入的时间窗>

					time_period timeWin = timeWinInfo.second;
					double beginT = timeDuration2Double(timeWin.begin() - getCurTime());
					double durationT = timeDuration2Double(timeWin.end() - timeWin.begin());

					opt << "," << beginT << ","
						<< durationT << std::endl;
					unsigned i_job(1);

					for (auto& jobs : timeWinInfo.first)  // 遍历所有job
					{
						Job* jobP = jobs.first;
						unsigned reEntry = jobs.second;

						//获取当前宽度
						unsigned machIndexOfJob(0);
						for (auto& proInfo : jobP->m_proceTargets)
						{
							if (make_pair(curMachP->m_machCode, reEntry) == proInfo.first)
								break;
							++machIndexOfJob;
						}

						double curWidth = jobP->m_getCurWidth(machIndexOfJob);
						// END OF 获取当前宽度

						opt << "," << "," << "," << "reentry=" << reEntry
							<< "," << jobP->m_jobCode
							<< "," << i_job
							<< "," << "当前宽度=" << curWidth << std::endl;
						++i_job;
					}
				}
				++i_timeline;
			}
		}
		else if (airFurnaceSet.find(machInfo.first) != airFurnaceSet.end()) {
			Mach_AirFurnace* curMachP = static_cast<Mach_AirFurnace*>(machInfo.second);
			opt << curMachP->m_machCode << endl;
			unsigned i_job(1);
			for (pair<pair<string, unsigned>, time_period>& timeWinInfo : curMachP->m_allocatedTimeWin)
			{// vector<pair<pair<string, unsigned>, time_period>> m_allocatedTimeWin;

				string jobCode = timeWinInfo.first.first;
				time_period timeWin = timeWinInfo.second;
				double beginT = timeDuration2Double(timeWin.begin() - getCurTime());
				double durationT = timeDuration2Double(timeWin.end() - timeWin.begin());

				opt << i_job << "," << "reentry=" << timeWinInfo.first.second
					<< "," << jobCode
					<< "," << beginT
					<< "," << durationT
					<< "," << jobsMap[jobCode]->m_alloyType << std::endl;
				++i_job;
			}
		}
		else {
			Mach* curMachP = machInfo.second;
			opt << curMachP->m_machCode << endl;
			unsigned i_job(1);
			for (auto& timeWinInfo : curMachP->m_allocatedTimeWin)  // 遍历所有time_period
			{
				string jobCode = timeWinInfo.first.first;
				time_period timeWin = timeWinInfo.second;
				double beginT = timeDuration2Double(timeWin.begin() - getCurTime());
				double durationT = timeDuration2Double(timeWin.end() - timeWin.begin());
				opt << i_job << "," << "reentry=" << timeWinInfo.first.second
					<< "," << jobCode
					<< timeWinInfo.first.second
					<< "," << beginT
					<< "," << durationT << std::endl;
				++i_job;
			}
		}
	};
	cout << "Done of writing to csv..." << endl;

	opt.close();
	opt.open("ResultsOfJob_spt.csv", ios::out | ios::trunc);

	cout << "Writing to csv..." << endl;
	for (auto& jobInfo : jobsMap)  // 遍历所有job
	{
		Job* curJobP = jobInfo.second;
		opt << curJobP->m_jobCode << "," << "," << to_iso_extended_string(curJobP->m_dueDateOfOrder) << endl;
		unsigned i_mach(0);
		for (auto& timeInfo : curJobP->m_allocatedTimeWin)  // 遍历所有time_period
		{
			string machCode = timeInfo.first.first;
			time_period timeWin = timeInfo.second;
			double beginT = timeDuration2Double(timeWin.begin() - getCurTime());
			double durationT = timeDuration2Double(timeWin.end() - timeWin.begin());

			opt << i_mach << "," << machCode << "," << beginT
				<< "," << durationT << std::endl;



			++i_mach;
		}
	};
	cout << "Done of writing to csv..." << endl;
}

// 打印最终排程结果
void writeToCSV(map<string, Job*>& jobsMap, map<string, Mach*>& machsMap, MYSQL* mysql)
{
	int coun = 0;
	for (auto& machInfo : machsMap)  // 遍历所有machine
	{
		cout << "machCodde=" << machInfo.first << endl;
		string jobCodeSeqs = "";

		if (CodeOfBellFurn == machInfo.first) {
			Mach_BellFurnace* curMachP = static_cast<Mach_BellFurnace*>(machInfo.second);
			unsigned i_timeline(0);
			for (auto& timeline : curMachP->m_timeLines)
			{
				for (auto& timeWinInfo : timeline)  // 遍历所有time_period
				{
					// using TimeWin = pair<map<Job*, unsigned>, time_period>;  // pair< map<Job*, 该job第几次重入>, job插入的时间窗>

					time_period timeWin = timeWinInfo.second;
					double beginT = timeDuration2Double(timeWin.begin() - getCurTime());
					double durationT = timeDuration2Double(timeWin.end() - timeWin.begin());
					unsigned i_job(1);

					for (auto& jobs : timeWinInfo.first)  // 遍历所有job
					{
						Job* jobP = jobs.first;
						jobCodeSeqs = jobCodeSeqs + "," + jobP->m_jobCode;
					}
				}
				++i_timeline;
			}
		}
		else if (airFurnaceSet.find(machInfo.first) != airFurnaceSet.end()) {
			Mach_AirFurnace* curMachP = static_cast<Mach_AirFurnace*>(machInfo.second);
			unsigned i_job(1);
			for (pair<pair<string, unsigned>, time_period>& timeWinInfo : curMachP->m_allocatedTimeWin)
			{// vector<pair<pair<string, unsigned>, time_period>> m_allocatedTimeWin;

				string jobCode = timeWinInfo.first.first;
				jobCodeSeqs = jobCodeSeqs + "," + jobCode;
			}
		}
		else {
			Mach* curMachP = machInfo.second;
			unsigned i_job(1);
			for (auto& timeWinInfo : curMachP->m_allocatedTimeWin)  // 遍历所有time_period
			{
				string jobCode = timeWinInfo.first.first;
				jobCodeSeqs = jobCodeSeqs + "," + jobCode;
			}
		}
		getCurTime();

		string strCurTime = to_iso_extended_string(getCurTime());
		strCurTime = strCurTime.substr(0, 4) + strCurTime.substr(5, 2) +
			strCurTime.substr(8, 2) + strCurTime.substr(11, 2) + strCurTime.substr(14, 2);

		string sqla = "insert into tlresultset (execution_time, sol_id, unit_id, pro_id) values('"
			+ strCurTime + "','" + "0" + "','"
			+ machInfo.first + "','" + jobCodeSeqs + "')";
		cout << sqla << " coun =" << coun << endl;
		char* sql = (char*)sqla.c_str();
		InsertDatabase1(mysql, sql);
		coun++;
	};



	int count = 0;
	for (auto& jobInfo : jobsMap)  // 遍历所有job
	{
		Job* curJobP = jobInfo.second;
		unsigned i_mach(0);
		for (auto& timeInfo : curJobP->m_allocatedTimeWin)  // 遍历所有time_period
		{
			string machCode = timeInfo.first.first;
			time_period timeWin = timeInfo.second;
			double beginT = timeDuration2Double(timeWin.begin() - getCurTime());
			double durationT = timeDuration2Double(timeWin.end() - timeWin.begin());

			string sStartT = to_iso_extended_string(timeWin.begin());
			string sEndT = to_iso_extended_string(timeWin.last());
			sStartT = sStartT.substr(0, 4) + sStartT.substr(5, 2) +
				sStartT.substr(8, 2) + sStartT.substr(11, 2) + sStartT.substr(14, 2);
			sEndT = sEndT.substr(0, 4) + sEndT.substr(5, 2) +
				sEndT.substr(8, 2) + sEndT.substr(11, 2) + sEndT.substr(14, 2);

			string sqla = "insert into tlresult (unit_id, tape_label, start_time, end_time) values('"
				+ machCode + "','" + curJobP->m_jobCode + "','"
				+ sStartT + "','" + sEndT + "')";
			//cout << sqla << " count ="<<count<< endl;
			char* sql = (char*)sqla.c_str();
			InsertDatabase1(mysql, sql);

			++i_mach;
			++count;
		}
	};
	cout << "Done of writing to csv..." << endl;
	cout << "count=" << count << endl;
}




void main()
{
	vector<string> jobsCodeVec;     // vector<job code>
	vector<string> machsCodeVec;    // vector<machine code>
	map<string, Job*> jobsMap;      // map<jobCode, Job*>
	map<string, Mach*> machsMap;    // map<machCode, Mach*>
	//ptime curTime = from_iso_string("20200610T000000");  // 当前时间
	//ptime curTime = from_iso_string("20200501T0000000");

	MYSQL* mysql = new MYSQL;
	MYSQL_RES* res(NULL);   //这个结构代表返回行的一个查询结果集  
	ConnectDatabase(mysql);

	char* sqla = "select * from tlorderinformation order by alloy_grade, deadline;"; //  select * from tlorderinformation
	res = QueryDatabase1(mysql, sqla);
	initializeJobs(res, jobsCodeVec, jobsMap);

	sqla = "select * from tlunit";
	res = QueryDatabase1(mysql, sqla);
	initialMachs(res, machsCodeVec, machsMap);

	sqla = "select * from tlcapacity"; //,  by tape_lable, order_id order_id
	res = QueryDatabase1(mysql, sqla);
	initializeCaps(res, machsCodeVec, machsMap);

	sqla = "select * from tlprocess"; //,  by tape_lable, order_id order_id
	res = QueryDatabase1(mysql, sqla);
	initializeJobs2(res, jobsCodeVec, jobsMap);


	// 打印
	for (auto& jobInfo : jobsMap)  // 遍历所有job，初始化开始和结束日期
	{
		string curjobcode = jobInfo.first;
		Job* curJobP = jobInfo.second;
		curJobP->m_dueDateOfOrder = from_iso_string((curJobP->m_dueDateOfOrderStr) + "T115959");
		if (false)
		{
			std::cout << curjobcode << ": " << curJobP->m_dueDateOfOrderStr
				<< " " << curJobP->m_alloyGrade << std::endl;
			std::cout << curjobcode << ": " << to_iso_string(curJobP->m_dueDateOfOrder) << std::endl;
		}

		// 检查job的日期格式！！？？!!??
		curJobP->m_startDateOfOrder = getCurTime();
	}


	//myInitialization(jobsCodeVec, machsCodeVec, jobsMap, machsMap);
	vector<pair<Job*, ptime>> jobsWithDueDate;               // vector<pair<Job*, 截止时间>>
	vector<pair<Job*, time_duration>> jobsWithTotalProTime;  // vector<pair<Job*, 总加工时间>>
	vector<pair<Job*, time_duration>> jobsWithSlackTime;  // vector<pair<Job*, 松弛时间>>   松弛时间：job的剩余时间（当前时点距离交货期的时间）与该job所需的加工时间之差
	for (auto& jobInfo : jobsMap)  // 遍历所有job，processTime，获取processTime
	{
		string curJobCode = jobInfo.first;

		Job* curJobP = jobInfo.second;
		jobsWithDueDate.push_back(make_pair(curJobP, curJobP->m_dueDateOfOrder));
		time_duration sumOfProcessTime;
		unsigned machIndex(0);
		if (curJobP->m_dueDateOfOrder <= getCurTime() && 0)
		{
			cout << "job '" << curJobP->m_jobCode
				<< "' has already missed its deadline!!! It will no long be scheduled." << endl;
			continue;
		}

		for (pair<string, unsigned>& machInfoOfCurJob : curJobP->m_proceMachs)   // 遍历某个job的所有machine
		{
			//std::cout << "machIndex=" << machIndex 
			//std::cout<< curJobP->m_proceTargets.size() << std::endl;
			ProcessTargets const& processTargets = (curJobP->m_proceTargets)[machIndex].second;
			time_duration processTime = getProcessTime(machsMap[machInfoOfCurJob.first], curJobP, machIndex);
			//time_duration processTime = curJobP->m_proceTimes[machIndex].second;
			std::cout << "2processtT=" << to_iso_string(processTime) << std::endl;
			if (curJobP->m_proceTimes.size() > machIndex)
				curJobP->m_proceTimes[machIndex] = make_pair((curJobP->m_proceTargets)[machIndex].first, processTime);
			else
				curJobP->m_proceTimes.insert(curJobP->m_proceTimes.begin() + machIndex,
					make_pair(curJobP->m_proceTargets[machIndex].first, processTime));

			sumOfProcessTime = sumOfProcessTime + processTime;
			++machIndex;
		}

		curJobP->m_totalProceTime = sumOfProcessTime;
		std::cout << "sumOfProcessTime = " << to_iso_string(sumOfProcessTime) << std::endl;
		time_duration slackTime = (curJobP->m_dueDateOfOrder - getCurTime()) - sumOfProcessTime;  //job的剩余时间（当前时点距离交货期的时间）与该job所需的加工时间之差
		jobsWithSlackTime.push_back(make_pair(curJobP, slackTime));
		jobsWithTotalProTime.push_back(make_pair(curJobP, sumOfProcessTime));
	}

	// 根据截止时间，总加工时间，松弛时间排序
	sort(jobsWithDueDate.begin(), jobsWithDueDate.end(), myCmpBy_ptime);
	sort(jobsWithTotalProTime.begin(), jobsWithTotalProTime.end(), myCmpBy_time_duration);
	sort(jobsWithSlackTime.begin(), jobsWithSlackTime.end(), myCmpBy_time_duration);


	for (auto& jobInfo : jobsWithSlackTime)  // 遍历所有job jobsWithDueDate
	{
		Job* curJobP = jobInfo.first;
		if (1)
		{
			//std::cout << "Job code: " << curJobP->m_jobCode << "  SlackTime: " << to_iso_string(jobInfo.second)
			//<< " hours" << std::endl;
			//std::cout << "Job code: " << curJobP->m_jobCode << "  DueTime: " << to_iso_extended_string(jobInfo.second)
			//<< " hours"<< std::endl;
			//std::cout << "  " << curJobP->m_alloyGrade << std::endl;

		}
	};

	cout << "jobsWithSlackTime.size()=" << jobsWithSlackTime.size() << endl;


}
















